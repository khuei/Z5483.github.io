{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"source/about/'","path":"about/'","modified":0,"renderable":0},{"_id":"source/about/khuen-public-key.gpg","path":"about/khuen-public-key.gpg","modified":0,"renderable":0},{"_id":"themes/chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/chic/source/image/avatar.jpeg","path":"image/avatar.jpeg","modified":0,"renderable":1},{"_id":"themes/chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1},{"_id":"source/pdf/resume.pdf","path":"pdf/resume.pdf","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/C-Coding-Style.md","hash":"50a6bfda69d06d688c7b80207f7fc8e73425f5b6","modified":1636586399445},{"_id":"source/about/'","hash":"7508f119d2fefcbf1d71be54d1993b7b80a2b585","modified":1636475944541},{"_id":"source/about/index.md","hash":"f5d30c4243de83c2bbf3fc3c975577a53d6d22d9","modified":1636727468092},{"_id":"source/about/khuen-public-key.gpg","hash":"f0001177ac7808721f6ca819fa1ee618d87bf562","modified":1636475944563},{"_id":"source/category/index.md","hash":"1c819e084c5962bb7bcaaa13ff51af207e3acf7f","modified":1636586204673},{"_id":"source/projects/index.md","hash":"b381f1a743092c0dab464a9687b5034b5d4800cf","modified":1636590502806},{"_id":"source/home/index.md","hash":"afe41b0dacbeaeb1b2c42345e47014442cd79c26","modified":1636587104871},{"_id":"source/tag/index.md","hash":"1968535890f250d25030e99bb32275ee4b3ea404","modified":1636586189015},{"_id":"themes/chic/ChangeLogs.md","hash":"06653c18d7a861f784269c9fe9dd69aa72b0c242","modified":1636475944564},{"_id":"themes/chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1636475944565},{"_id":"themes/chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1636475944575},{"_id":"themes/chic/_config.yml","hash":"e5cf6a9e3f5b4b25208e8a2e84c8bfee1258586c","modified":1637154065680},{"_id":"themes/chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1636475944566},{"_id":"themes/chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1636475944566},{"_id":"themes/chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1636475944565},{"_id":"themes/chic/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1636475944566},{"_id":"themes/chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1636475944566},{"_id":"themes/chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1636475944566},{"_id":"themes/chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1636475944566},{"_id":"themes/chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1636475944566},{"_id":"themes/chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1636475944566},{"_id":"themes/chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1636475944566},{"_id":"themes/chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1636475944566},{"_id":"themes/chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1636475944566},{"_id":"themes/chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1636475944566},{"_id":"themes/chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1636475944566},{"_id":"themes/chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1636475944572},{"_id":"themes/chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1636475944572},{"_id":"themes/chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1636475944572},{"_id":"themes/chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1636475944573},{"_id":"themes/chic/layout/layout.ejs","hash":"8565bbea5e904e75e8d1ff5186b3a53650a7fa70","modified":1636475944573},{"_id":"themes/chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1636475944574},{"_id":"themes/chic/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1636475944574},{"_id":"themes/chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1636475944575},{"_id":"themes/chic/source/favicon.ico","hash":"92cbd806ca421aa2c9ff5e1ff76bbc20913a2f81","modified":1636475944633},{"_id":"themes/chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1636475944567},{"_id":"themes/chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1636475944567},{"_id":"themes/chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1636475944567},{"_id":"themes/chic/layout/_page/profile.ejs","hash":"c6d3cf2ef90e5d0fd580e7cff1db47c28fb36037","modified":1636475944568},{"_id":"themes/chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1636475944568},{"_id":"themes/chic/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1636475944569},{"_id":"themes/chic/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1636475944569},{"_id":"themes/chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1636475944570},{"_id":"themes/chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1636475944570},{"_id":"themes/chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1636475944567},{"_id":"themes/chic/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1636475944571},{"_id":"themes/chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1636475944571},{"_id":"themes/chic/source/css/base.styl","hash":"72aef06d738853f13f1697b091002d6d776bd56d","modified":1636475944613},{"_id":"themes/chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1636475944613},{"_id":"themes/chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1636475944614},{"_id":"themes/chic/source/css/layout.styl","hash":"9942d05bb2c55cf035d4bf9af325e1e81766a510","modified":1636475944614},{"_id":"themes/chic/source/css/style.styl","hash":"f938631be338f027dfd7eb9ad6657737ece3bbc5","modified":1636727240050},{"_id":"themes/chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1636475944615},{"_id":"themes/chic/source/js/script.js","hash":"eedc06777e3ba60b2b60aad76e17f1f4b2aea755","modified":1636580759232},{"_id":"themes/chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1636475944615},{"_id":"themes/chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1636574523219},{"_id":"themes/chic/source/css/variable.styl","hash":"6c8361201a822194a16b9a96f81671bbad2175cb","modified":1636590452507},{"_id":"themes/chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1636574523220},{"_id":"themes/chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1636475944693},{"_id":"themes/chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1636574523220},{"_id":"themes/chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1636574523221},{"_id":"themes/chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1636574523222},{"_id":"themes/chic/source/image/avatar.jpeg","hash":"c771325a72eca92edc6929d0e8f34d8f1f3aa760","modified":1636475944693},{"_id":"themes/chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1636574523222},{"_id":"themes/chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1636574523223},{"_id":"themes/chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1636574523224},{"_id":"themes/chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1636574523225},{"_id":"themes/chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1636475944693},{"_id":"themes/chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1636574523226},{"_id":"themes/chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1636574523226},{"_id":"themes/chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1636574523226},{"_id":"themes/chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1636574523226},{"_id":"themes/chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1636574523226},{"_id":"themes/chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1636574523226},{"_id":"themes/chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1636574523226},{"_id":"themes/chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1636475944605},{"_id":"themes/chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1636475944606},{"_id":"themes/chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1636475944609},{"_id":"themes/chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1636475944610},{"_id":"themes/chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1636475944610},{"_id":"themes/chic/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1636475944611},{"_id":"themes/chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1636475944611},{"_id":"themes/chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1636475944611},{"_id":"themes/chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1636574523225},{"_id":"themes/chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1636574523225},{"_id":"themes/chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1636475944612},{"_id":"themes/chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1636574523225},{"_id":"themes/chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1636475944612},{"_id":"themes/chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1636475944633},{"_id":"themes/chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1636475944633},{"_id":"themes/chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1636475944634},{"_id":"themes/chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1636475944634},{"_id":"themes/chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1636475944606},{"_id":"themes/chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1636475944607},{"_id":"themes/chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1636475944607},{"_id":"themes/chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1636475944608},{"_id":"themes/chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1636475944607},{"_id":"themes/chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1636475944608},{"_id":"themes/chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1636475944609},{"_id":"themes/chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1636475944692},{"_id":"themes/chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1636475944691},{"_id":"themes/chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1636475944666},{"_id":"themes/chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1636475944652},{"_id":"themes/chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1636475944689},{"_id":"public/about/index.html","hash":"637eaa833283aa32edcf765961d6b9ce6bc467b4","modified":1636926596226},{"_id":"public/category/index.html","hash":"0316bd01bc77822332b9ba833a6d016ebb911c92","modified":1636926596226},{"_id":"public/home/index.html","hash":"8ac0939003125384ccff7bd0e45f7be4ca68de26","modified":1637154067124},{"_id":"public/tag/index.html","hash":"74cb41ef6612a19cb0b7fed77d8c361a61d0a266","modified":1636926596226},{"_id":"public/projects/index.html","hash":"b8b372ec69d3ccc0270bdea2c61370fcf450668d","modified":1636926596226},{"_id":"public/archives/2021/index.html","hash":"44a6452ad29b13e46db0e7c383ca1259c71eaea9","modified":1636926596226},{"_id":"public/archives/index.html","hash":"31d915b654df23a41e557fc7da33c607415b62e8","modified":1636926596226},{"_id":"public/archives/2021/11/index.html","hash":"4ff5e51e851390459810484d881394e5c3635126","modified":1636926596226},{"_id":"public/categories/testing/index.html","hash":"ccf82798a4f82d05ed819054047fc6be6a8f080e","modified":1636926596226},{"_id":"public/tags/website/index.html","hash":"4e0617d9f4c9b4df26eb9daafe249e33e6929ed4","modified":1636926596226},{"_id":"public/index.html","hash":"ef470dfbd61df5467f295124cd3096fe78a779f9","modified":1637154067124},{"_id":"public/tags/syntax-highlight/index.html","hash":"faa4f2d9ccc1deef042edb4043fc9089795b1eeb","modified":1636926596226},{"_id":"public/2021/11/08/C-Coding-Style/index.html","hash":"91a6c77a209309a7a387597105d81dbda4a37c08","modified":1636926596226},{"_id":"public/about/'","hash":"7508f119d2fefcbf1d71be54d1993b7b80a2b585","modified":1636926596226},{"_id":"public/about/khuen-public-key.gpg","hash":"f0001177ac7808721f6ca819fa1ee618d87bf562","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1636926596226},{"_id":"public/favicon.ico","hash":"92cbd806ca421aa2c9ff5e1ff76bbc20913a2f81","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1636926596226},{"_id":"public/image/avatar.jpeg","hash":"c771325a72eca92edc6929d0e8f34d8f1f3aa760","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1636926596226},{"_id":"public/css/layout.css","hash":"c81e2e01ff5e95a3e613064b8490045ff936c305","modified":1636926596226},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1636926596226},{"_id":"public/css/base.css","hash":"2fce73a3c2df8f93edeb5e34a53b7d83e5191d85","modified":1636926596226},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1636926596226},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1636926596226},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1636926596226},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1636926596226},{"_id":"public/js/script.js","hash":"eedc06777e3ba60b2b60aad76e17f1f4b2aea755","modified":1636926596226},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1636926596226},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1636926596226},{"_id":"public/css/style.css","hash":"0e2f6800cf2b325d85bf9fecf723177ace147231","modified":1636926596226},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1636926596226},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1636926596226},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1636926596226},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1636926596226},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1636926596226},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1636926596226},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1636926596226},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1636926596226},{"_id":"source/pdf/resume.pdf","hash":"93ce5644bfc39dbf28cbc3fce3041aeb6953d31d","modified":1637154081497},{"_id":"public/pdf/resume.pdf","hash":"93ce5644bfc39dbf28cbc3fce3041aeb6953d31d","modified":1637154086830}],"Category":[{"name":"testing","_id":"ckvwh90xb0003rktgc36j8fyu"}],"Data":[],"Page":[{"title":"About","date":"2021-11-08T15:21:36.000Z","_content":"\n### PROFILE\n\nSoftware Developer\nFreshman Undergraduate Computer Science Student at Clemson University\n\n### EXPERIENCE\n\n#### Lead Programmer, West Ashley Robotics Team: Charleston, SC, US - (2018 - 2021)\n\nCoder and mentor working on developing programs for VEX robots - UX/UI design, motion/tracking algorithms, and sensor controllers - in addition to managing engineering journal.\n\n#### Programmer, BCUZ Robotics: Clemson, SC, US - (2021 - present)\n\nCoder working on developing efficient programs for VEX robots\n\n### EDUCATION\n\nWest Ashley High School - High School Diploma (2017 - 2021)\nClemson University - Bachelor of Computer Science (2021 - present)\n\n### SKILLS\n\n- Programming languages:\n  - C\n  - C++\n  - Lua\n  - Perl\n  - Python\n  - Rust\n- Tools:\n  - Operating System:\n    - Linux\n    - OpenBSD\n    - Windows\n  - Hypertext:\n    - HTML/CSS\n    - Markdown\n    - LaTeX\n  - Shell:\n    - POSIX sh\n    - Zsh\n    - Bash\n  - Version Control: Git\n- Spoken languages:\n  - English\n  - Vietnamese\n\n### MISC\n\nEmail: Z5483Y@gmail.com\nGPG Key: [public key](./khuen-public-key.gpg)\n","source":"about/index.md","raw":"---\ntitle: About\ndate: 2021-11-08 10:21:36\n---\n\n### PROFILE\n\nSoftware Developer\nFreshman Undergraduate Computer Science Student at Clemson University\n\n### EXPERIENCE\n\n#### Lead Programmer, West Ashley Robotics Team: Charleston, SC, US - (2018 - 2021)\n\nCoder and mentor working on developing programs for VEX robots - UX/UI design, motion/tracking algorithms, and sensor controllers - in addition to managing engineering journal.\n\n#### Programmer, BCUZ Robotics: Clemson, SC, US - (2021 - present)\n\nCoder working on developing efficient programs for VEX robots\n\n### EDUCATION\n\nWest Ashley High School - High School Diploma (2017 - 2021)\nClemson University - Bachelor of Computer Science (2021 - present)\n\n### SKILLS\n\n- Programming languages:\n  - C\n  - C++\n  - Lua\n  - Perl\n  - Python\n  - Rust\n- Tools:\n  - Operating System:\n    - Linux\n    - OpenBSD\n    - Windows\n  - Hypertext:\n    - HTML/CSS\n    - Markdown\n    - LaTeX\n  - Shell:\n    - POSIX sh\n    - Zsh\n    - Bash\n  - Version Control: Git\n- Spoken languages:\n  - English\n  - Vietnamese\n\n### MISC\n\nEmail: Z5483Y@gmail.com\nGPG Key: [public key](./khuen-public-key.gpg)\n","updated":"2021-11-12T14:31:08.092Z","path":"about/index.html","_id":"ckvwh90x20000rktg4vt7ff3c","comments":1,"layout":"page","content":"<h3 id=\"PROFILE\"><a href=\"#PROFILE\" class=\"headerlink\" title=\"PROFILE\"></a>PROFILE</h3><p>Software Developer<br>Freshman Undergraduate Computer Science Student at Clemson University</p>\n<h3 id=\"EXPERIENCE\"><a href=\"#EXPERIENCE\" class=\"headerlink\" title=\"EXPERIENCE\"></a>EXPERIENCE</h3><h4 id=\"Lead-Programmer-West-Ashley-Robotics-Team-Charleston-SC-US-2018-2021\"><a href=\"#Lead-Programmer-West-Ashley-Robotics-Team-Charleston-SC-US-2018-2021\" class=\"headerlink\" title=\"Lead Programmer, West Ashley Robotics Team: Charleston, SC, US - (2018 - 2021)\"></a>Lead Programmer, West Ashley Robotics Team: Charleston, SC, US - (2018 - 2021)</h4><p>Coder and mentor working on developing programs for VEX robots - UX/UI design, motion/tracking algorithms, and sensor controllers - in addition to managing engineering journal.</p>\n<h4 id=\"Programmer-BCUZ-Robotics-Clemson-SC-US-2021-present\"><a href=\"#Programmer-BCUZ-Robotics-Clemson-SC-US-2021-present\" class=\"headerlink\" title=\"Programmer, BCUZ Robotics: Clemson, SC, US - (2021 - present)\"></a>Programmer, BCUZ Robotics: Clemson, SC, US - (2021 - present)</h4><p>Coder working on developing efficient programs for VEX robots</p>\n<h3 id=\"EDUCATION\"><a href=\"#EDUCATION\" class=\"headerlink\" title=\"EDUCATION\"></a>EDUCATION</h3><p>West Ashley High School - High School Diploma (2017 - 2021)<br>Clemson University - Bachelor of Computer Science (2021 - present)</p>\n<h3 id=\"SKILLS\"><a href=\"#SKILLS\" class=\"headerlink\" title=\"SKILLS\"></a>SKILLS</h3><ul>\n<li>Programming languages:<ul>\n<li>C</li>\n<li>C++</li>\n<li>Lua</li>\n<li>Perl</li>\n<li>Python</li>\n<li>Rust</li>\n</ul>\n</li>\n<li>Tools:<ul>\n<li>Operating System:<ul>\n<li>Linux</li>\n<li>OpenBSD</li>\n<li>Windows</li>\n</ul>\n</li>\n<li>Hypertext:<ul>\n<li>HTML/CSS</li>\n<li>Markdown</li>\n<li>LaTeX</li>\n</ul>\n</li>\n<li>Shell:<ul>\n<li>POSIX sh</li>\n<li>Zsh</li>\n<li>Bash</li>\n</ul>\n</li>\n<li>Version Control: Git</li>\n</ul>\n</li>\n<li>Spoken languages:<ul>\n<li>English</li>\n<li>Vietnamese</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h3><p>Email: <a href=\"mailto:&#90;&#x35;&#x34;&#x38;&#x33;&#89;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#90;&#x35;&#x34;&#x38;&#x33;&#89;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a><br>GPG Key: <a href=\"./khuen-public-key.gpg\">public key</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"PROFILE\"><a href=\"#PROFILE\" class=\"headerlink\" title=\"PROFILE\"></a>PROFILE</h3><p>Software Developer<br>Freshman Undergraduate Computer Science Student at Clemson University</p>\n<h3 id=\"EXPERIENCE\"><a href=\"#EXPERIENCE\" class=\"headerlink\" title=\"EXPERIENCE\"></a>EXPERIENCE</h3><h4 id=\"Lead-Programmer-West-Ashley-Robotics-Team-Charleston-SC-US-2018-2021\"><a href=\"#Lead-Programmer-West-Ashley-Robotics-Team-Charleston-SC-US-2018-2021\" class=\"headerlink\" title=\"Lead Programmer, West Ashley Robotics Team: Charleston, SC, US - (2018 - 2021)\"></a>Lead Programmer, West Ashley Robotics Team: Charleston, SC, US - (2018 - 2021)</h4><p>Coder and mentor working on developing programs for VEX robots - UX/UI design, motion/tracking algorithms, and sensor controllers - in addition to managing engineering journal.</p>\n<h4 id=\"Programmer-BCUZ-Robotics-Clemson-SC-US-2021-present\"><a href=\"#Programmer-BCUZ-Robotics-Clemson-SC-US-2021-present\" class=\"headerlink\" title=\"Programmer, BCUZ Robotics: Clemson, SC, US - (2021 - present)\"></a>Programmer, BCUZ Robotics: Clemson, SC, US - (2021 - present)</h4><p>Coder working on developing efficient programs for VEX robots</p>\n<h3 id=\"EDUCATION\"><a href=\"#EDUCATION\" class=\"headerlink\" title=\"EDUCATION\"></a>EDUCATION</h3><p>West Ashley High School - High School Diploma (2017 - 2021)<br>Clemson University - Bachelor of Computer Science (2021 - present)</p>\n<h3 id=\"SKILLS\"><a href=\"#SKILLS\" class=\"headerlink\" title=\"SKILLS\"></a>SKILLS</h3><ul>\n<li>Programming languages:<ul>\n<li>C</li>\n<li>C++</li>\n<li>Lua</li>\n<li>Perl</li>\n<li>Python</li>\n<li>Rust</li>\n</ul>\n</li>\n<li>Tools:<ul>\n<li>Operating System:<ul>\n<li>Linux</li>\n<li>OpenBSD</li>\n<li>Windows</li>\n</ul>\n</li>\n<li>Hypertext:<ul>\n<li>HTML/CSS</li>\n<li>Markdown</li>\n<li>LaTeX</li>\n</ul>\n</li>\n<li>Shell:<ul>\n<li>POSIX sh</li>\n<li>Zsh</li>\n<li>Bash</li>\n</ul>\n</li>\n<li>Version Control: Git</li>\n</ul>\n</li>\n<li>Spoken languages:<ul>\n<li>English</li>\n<li>Vietnamese</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"MISC\"><a href=\"#MISC\" class=\"headerlink\" title=\"MISC\"></a>MISC</h3><p>Email: <a href=\"mailto:&#90;&#x35;&#x34;&#x38;&#x33;&#89;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#90;&#x35;&#x34;&#x38;&#x33;&#89;&#x40;&#103;&#109;&#97;&#x69;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a><br>GPG Key: <a href=\"./khuen-public-key.gpg\">public key</a></p>\n"},{"title":"Category","date":"2021-11-08T15:21:44.000Z","layout":"category","_content":"","source":"category/index.md","raw":"---\ntitle: Category\ndate: 2021-11-08 10:21:44\nlayout: category\n---\n","updated":"2021-11-10T23:16:44.673Z","path":"category/index.html","comments":1,"_id":"ckvwh90x90002rktgdbm54gef","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"home","date":"2021-11-10T23:21:37.000Z","layout":"_page/profile","_content":"","source":"home/index.md","raw":"---\ntitle: home\ndate: 2021-11-10 18:21:37\nlayout: _page/profile\n---\n","updated":"2021-11-10T23:31:44.871Z","path":"home/index.html","comments":1,"_id":"ckvwh90xe0005rktgaggw61yq","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tag","date":"2021-11-08T15:21:41.000Z","layout":"tag","_content":"","source":"tag/index.md","raw":"---\ntitle: Tag\ndate: 2021-11-08 10:21:41\nlayout: tag\n---\n","updated":"2021-11-10T23:16:29.015Z","path":"tag/index.html","comments":1,"_id":"ckvwh90xf0006rktg6553evwd","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Projects","date":"2021-11-10T23:01:42.000Z","_content":"\n| name | description |\n|------|-------------|\n| [base16-fork](https://github.com/base16-fork) | A more structured and regenerative base16 theme environment |\n| [cbase16](https://github.com/Z5483/cbase16) | A blazing fast base16 colorscheme builder |\n| [tdr](https://github.com/Z5483/tdr) | Text-based user interface utility to manage todo list |\n| [timestamp](https://github.com/Z5483/timestamp) | trusted timestamp management for git |\n\n","source":"projects/index.md","raw":"---\ntitle: Projects\ndate: 2021-11-10 18:01:42\n---\n\n| name | description |\n|------|-------------|\n| [base16-fork](https://github.com/base16-fork) | A more structured and regenerative base16 theme environment |\n| [cbase16](https://github.com/Z5483/cbase16) | A blazing fast base16 colorscheme builder |\n| [tdr](https://github.com/Z5483/tdr) | Text-based user interface utility to manage todo list |\n| [timestamp](https://github.com/Z5483/timestamp) | trusted timestamp management for git |\n\n","updated":"2021-11-11T00:28:22.806Z","path":"projects/index.html","comments":1,"layout":"page","_id":"ckvwh90xg0007rktgceqw9rd3","content":"<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/base16-fork\">base16-fork</a></td>\n<td>A more structured and regenerative base16 theme environment</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Z5483/cbase16\">cbase16</a></td>\n<td>A blazing fast base16 colorscheme builder</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Z5483/tdr\">tdr</a></td>\n<td>Text-based user interface utility to manage todo list</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Z5483/timestamp\">timestamp</a></td>\n<td>trusted timestamp management for git</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<table>\n<thead>\n<tr>\n<th>name</th>\n<th>description</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://github.com/base16-fork\">base16-fork</a></td>\n<td>A more structured and regenerative base16 theme environment</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Z5483/cbase16\">cbase16</a></td>\n<td>A blazing fast base16 colorscheme builder</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Z5483/tdr\">tdr</a></td>\n<td>Text-based user interface utility to manage todo list</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/Z5483/timestamp\">timestamp</a></td>\n<td>trusted timestamp management for git</td>\n</tr>\n</tbody></table>\n"}],"Post":[{"title":"C Coding Style","date":"2021-11-08T14:53:36.000Z","_content":"\n> This page is generated for website testing purposes\n\n### Text Width\n\nThere is no set code width, so you do not need to break code lines. However, you should not overdo it, ~100 characters should be enough.\n\n### Naming\n\n- Name structures in `PascalCase`\n- Name variables and functions in `snake_case`\n\n### Indentation\n\n- Use tabs not space\n- Tabs are 8 characters\n\nThis style of indentation clearly defines where a block of code starts and ends especially when you have been looking at your screen for a long period of time\n\nFor `switch-case` statement, align the switch and its subordinate case labels in the same column. For example:\n\n``` c\nswitch (suffix) {\ncase 'a':\n      break;\ncase 'b':\n      break;\ncase 'c':\n      break;\ndefault:\n}\n```\n\n### Spacing\n\nUse a space after these keywords: `if`, `switch`, `case`, `for`, `do`, `while`\n\nBut not after `sizeof`, `typeof`, `alignof`, or `__attribute__`.\n\nWhen declaring pointer, place the `*` adjacent to the data name or function\nname like this:\n\n``` c\nchar *string;\nint *num(void);\nvoid die(const char *errstr, ...);\n```\n\nUse one space around binary and ternary operators, such as these:\n\n```\n=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :\n```\n\nDo not put space after unary operators:\n\n```\n&  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined\n```\n\nNo space after postfix/prefix increment and decrement unary operators:\n\n```\n++ --\n```\n\nAnd no space around the `.` and `->` structure member operators.\n\nIn addition, do not leave trailing whitespace at the end of lines\n\n### Alignment\n\nUse tabs for indentation and spaces for alignment. This ensures everything will line up independent of tab size. This means:\n\n- No tabs except beginning of line.\n- Use spaces - not tabs - for multiline macros\n\n### Braces Placement\n\nPut opening brace last on the line, and put the close brace first. This applies to all non-functional statement blocks (if, switch, for, while, do).\n\n``` c\nif (true) {\n      // do x\n      // do y\n      // do z\n}\n```\n\nHowever, for function, place opening brace at the beginning of the next line\nlike this:\n\n``` c\nint\nfunction (int x)\n{\n      // body of function\n}\n```\n\nUsually closing brace is empty on a line of its own except in cases where it is followed by a continuation of the same statement, such as a while in a `do-while` statement or an else in an `if-else` statement like the following:\n\n``` c\ndo {\n      // body of do-while loop\n} while (condition);\n```\n\nand\n\n``` c\nif (x == y) {\n      // do something\n} else if (x > y) {\n      // do something else\n} else {\n      // do something else\n}\n```\n\nDo not place braces in situation where there is only a single statement in the block. For example:\n\n``` c\nfor (condition)\n      action();\n```\n\nand\n\n``` c\nif (condition)\n      action();\n```\n\nand\n\n``` c\nif (condition)\n        do_something();\nelse\n        do_something_else();\n```\n\nHowever, this does not apply if only one branch of an `if-else` statement is a single statement. In this case, use braces in both branches like the following:\n\n``` c\nif (condition) {\n        do_this();\n        do_that();\n} else {\n        do_something_else();\n}\n```\n\n### Function\n\n- Put return type and modifiers on its own line.\n- Put function name and argument list on next line.\n\n``` c\nstatic void\ndie(const char *errstr, ...)\n{\n      // print error message\n}\n```\n\nThis allows to grep for function names by simply using `grep ^functioname(`\n\n### Commenting\n\n- Use `/* comment */` for comments\n- Use `// comment` for local, temporary commenting of code for debugging purposes\n\nThe preferred style for long (multi-line) comments is:\n\n``` c\n/*\n * This is the preferred style for multi-line\n * comments in the Linux kernel source code.\n * Please use it consistently.\n *\n * Description:  A column of asterisks on the left side,\n * with beginning and ending almost-blank lines.\n */\n ```\n\n## Macros, Enums and RTL\n\nNames of macros defining constants and labels in enums are capitalized.\n\n``` c\n#define CONSTANT 0x12345\n```\n\nEnums are preferred when defining several related constants.\n\nCAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case.\n\nGenerally, inline functions are preferable to macros resembling functions.\n\nMacros with multiple statements should be enclosed in a do - while block:\n\n``` c\n#define macrofun(a, b, c)                       \\\n        do {                                    \\\n                if (a == 5)                     \\\n                        do_this(b, c);          \\\n        } while (0)\n```\n\nThings to avoid when using macros:\n\n1. macros that affect control flow:\n\n``` c\n#define FOO(x)                                  \\\n        do {                                    \\\n                if (blah(x) < 0)                \\\n                        return -EBUGGERED;      \\\n        } while (0)\n```\n\nis a very bad idea. It looks like a function call but exits the calling function; don’t break the internal parsers of those who will read the code.\n\n2. macros that depend on having a local variable with a magic name:\n\n``` c\n#define FOO(val) bar(index, val)\n```\n\nmight look like a good thing, but it’s confusing as hell when one reads the code and it’s prone to breakage from seemingly innocent changes.\n\n3. macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function.\n\n4. forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters.\n\n``` c\n#define CONSTANT 0x4000\n#define CONSTEXP (CONSTANT | 3)\n```\n\n5. namespace collisions when defining local variables in macros resembling functions:\n\n``` c\n#define FOO(x)                          \\\n({                                      \\\n        typeof(x) ret;                  \\\n        ret = calc_ret(x);              \\\n        (ret);                          \\\n})\n```\n\nret is a common name for a local variable - \\__foo_ret is less likely to collide with an existing variable.\n\nThe c manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel.\n","source":"_posts/C-Coding-Style.md","raw":"---\ntitle: C Coding Style\ndate: 2021-11-08 09:53:36\ncategory: testing\ntags: [website, syntax-highlight]\n---\n\n> This page is generated for website testing purposes\n\n### Text Width\n\nThere is no set code width, so you do not need to break code lines. However, you should not overdo it, ~100 characters should be enough.\n\n### Naming\n\n- Name structures in `PascalCase`\n- Name variables and functions in `snake_case`\n\n### Indentation\n\n- Use tabs not space\n- Tabs are 8 characters\n\nThis style of indentation clearly defines where a block of code starts and ends especially when you have been looking at your screen for a long period of time\n\nFor `switch-case` statement, align the switch and its subordinate case labels in the same column. For example:\n\n``` c\nswitch (suffix) {\ncase 'a':\n      break;\ncase 'b':\n      break;\ncase 'c':\n      break;\ndefault:\n}\n```\n\n### Spacing\n\nUse a space after these keywords: `if`, `switch`, `case`, `for`, `do`, `while`\n\nBut not after `sizeof`, `typeof`, `alignof`, or `__attribute__`.\n\nWhen declaring pointer, place the `*` adjacent to the data name or function\nname like this:\n\n``` c\nchar *string;\nint *num(void);\nvoid die(const char *errstr, ...);\n```\n\nUse one space around binary and ternary operators, such as these:\n\n```\n=  +  -  <  >  *  /  %  |  &  ^  <=  >=  ==  !=  ?  :\n```\n\nDo not put space after unary operators:\n\n```\n&  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined\n```\n\nNo space after postfix/prefix increment and decrement unary operators:\n\n```\n++ --\n```\n\nAnd no space around the `.` and `->` structure member operators.\n\nIn addition, do not leave trailing whitespace at the end of lines\n\n### Alignment\n\nUse tabs for indentation and spaces for alignment. This ensures everything will line up independent of tab size. This means:\n\n- No tabs except beginning of line.\n- Use spaces - not tabs - for multiline macros\n\n### Braces Placement\n\nPut opening brace last on the line, and put the close brace first. This applies to all non-functional statement blocks (if, switch, for, while, do).\n\n``` c\nif (true) {\n      // do x\n      // do y\n      // do z\n}\n```\n\nHowever, for function, place opening brace at the beginning of the next line\nlike this:\n\n``` c\nint\nfunction (int x)\n{\n      // body of function\n}\n```\n\nUsually closing brace is empty on a line of its own except in cases where it is followed by a continuation of the same statement, such as a while in a `do-while` statement or an else in an `if-else` statement like the following:\n\n``` c\ndo {\n      // body of do-while loop\n} while (condition);\n```\n\nand\n\n``` c\nif (x == y) {\n      // do something\n} else if (x > y) {\n      // do something else\n} else {\n      // do something else\n}\n```\n\nDo not place braces in situation where there is only a single statement in the block. For example:\n\n``` c\nfor (condition)\n      action();\n```\n\nand\n\n``` c\nif (condition)\n      action();\n```\n\nand\n\n``` c\nif (condition)\n        do_something();\nelse\n        do_something_else();\n```\n\nHowever, this does not apply if only one branch of an `if-else` statement is a single statement. In this case, use braces in both branches like the following:\n\n``` c\nif (condition) {\n        do_this();\n        do_that();\n} else {\n        do_something_else();\n}\n```\n\n### Function\n\n- Put return type and modifiers on its own line.\n- Put function name and argument list on next line.\n\n``` c\nstatic void\ndie(const char *errstr, ...)\n{\n      // print error message\n}\n```\n\nThis allows to grep for function names by simply using `grep ^functioname(`\n\n### Commenting\n\n- Use `/* comment */` for comments\n- Use `// comment` for local, temporary commenting of code for debugging purposes\n\nThe preferred style for long (multi-line) comments is:\n\n``` c\n/*\n * This is the preferred style for multi-line\n * comments in the Linux kernel source code.\n * Please use it consistently.\n *\n * Description:  A column of asterisks on the left side,\n * with beginning and ending almost-blank lines.\n */\n ```\n\n## Macros, Enums and RTL\n\nNames of macros defining constants and labels in enums are capitalized.\n\n``` c\n#define CONSTANT 0x12345\n```\n\nEnums are preferred when defining several related constants.\n\nCAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case.\n\nGenerally, inline functions are preferable to macros resembling functions.\n\nMacros with multiple statements should be enclosed in a do - while block:\n\n``` c\n#define macrofun(a, b, c)                       \\\n        do {                                    \\\n                if (a == 5)                     \\\n                        do_this(b, c);          \\\n        } while (0)\n```\n\nThings to avoid when using macros:\n\n1. macros that affect control flow:\n\n``` c\n#define FOO(x)                                  \\\n        do {                                    \\\n                if (blah(x) < 0)                \\\n                        return -EBUGGERED;      \\\n        } while (0)\n```\n\nis a very bad idea. It looks like a function call but exits the calling function; don’t break the internal parsers of those who will read the code.\n\n2. macros that depend on having a local variable with a magic name:\n\n``` c\n#define FOO(val) bar(index, val)\n```\n\nmight look like a good thing, but it’s confusing as hell when one reads the code and it’s prone to breakage from seemingly innocent changes.\n\n3. macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function.\n\n4. forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters.\n\n``` c\n#define CONSTANT 0x4000\n#define CONSTEXP (CONSTANT | 3)\n```\n\n5. namespace collisions when defining local variables in macros resembling functions:\n\n``` c\n#define FOO(x)                          \\\n({                                      \\\n        typeof(x) ret;                  \\\n        ret = calc_ret(x);              \\\n        (ret);                          \\\n})\n```\n\nret is a common name for a local variable - \\__foo_ret is less likely to collide with an existing variable.\n\nThe c manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel.\n","slug":"C-Coding-Style","published":1,"updated":"2021-11-10T23:19:59.445Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckvwh90x60001rktg4c3347th","content":"<blockquote>\n<p>This page is generated for website testing purposes</p>\n</blockquote>\n<h3 id=\"Text-Width\"><a href=\"#Text-Width\" class=\"headerlink\" title=\"Text Width\"></a>Text Width</h3><p>There is no set code width, so you do not need to break code lines. However, you should not overdo it, ~100 characters should be enough.</p>\n<h3 id=\"Naming\"><a href=\"#Naming\" class=\"headerlink\" title=\"Naming\"></a>Naming</h3><ul>\n<li>Name structures in <code>PascalCase</code></li>\n<li>Name variables and functions in <code>snake_case</code></li>\n</ul>\n<h3 id=\"Indentation\"><a href=\"#Indentation\" class=\"headerlink\" title=\"Indentation\"></a>Indentation</h3><ul>\n<li>Use tabs not space</li>\n<li>Tabs are 8 characters</li>\n</ul>\n<p>This style of indentation clearly defines where a block of code starts and ends especially when you have been looking at your screen for a long period of time</p>\n<p>For <code>switch-case</code> statement, align the switch and its subordinate case labels in the same column. For example:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (suffix) &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;c&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spacing\"><a href=\"#Spacing\" class=\"headerlink\" title=\"Spacing\"></a>Spacing</h3><p>Use a space after these keywords: <code>if</code>, <code>switch</code>, <code>case</code>, <code>for</code>, <code>do</code>, <code>while</code></p>\n<p>But not after <code>sizeof</code>, <code>typeof</code>, <code>alignof</code>, or <code>__attribute__</code>.</p>\n<p>When declaring pointer, place the <code>*</code> adjacent to the data name or function<br>name like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">num</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *errstr, ...)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>Use one space around binary and ternary operators, such as these:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=  +  -  &lt;  &gt;  *  /  %  |  &amp;  ^  &lt;=  &gt;=  ==  !=  ?  :</span><br></pre></td></tr></table></figure>\n\n<p>Do not put space after unary operators:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined</span><br></pre></td></tr></table></figure>\n\n<p>No space after postfix/prefix increment and decrement unary operators:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++ --</span><br></pre></td></tr></table></figure>\n\n<p>And no space around the <code>.</code> and <code>-&gt;</code> structure member operators.</p>\n<p>In addition, do not leave trailing whitespace at the end of lines</p>\n<h3 id=\"Alignment\"><a href=\"#Alignment\" class=\"headerlink\" title=\"Alignment\"></a>Alignment</h3><p>Use tabs for indentation and spaces for alignment. This ensures everything will line up independent of tab size. This means:</p>\n<ul>\n<li>No tabs except beginning of line.</li>\n<li>Use spaces - not tabs - for multiline macros</li>\n</ul>\n<h3 id=\"Braces-Placement\"><a href=\"#Braces-Placement\" class=\"headerlink\" title=\"Braces Placement\"></a>Braces Placement</h3><p>Put opening brace last on the line, and put the close brace first. This applies to all non-functional statement blocks (if, switch, for, while, do).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do x</span></span><br><span class=\"line\">      <span class=\"comment\">// do y</span></span><br><span class=\"line\">      <span class=\"comment\">// do z</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, for function, place opening brace at the beginning of the next line<br>like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">function</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// body of function</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Usually closing brace is empty on a line of its own except in cases where it is followed by a continuation of the same statement, such as a while in a <code>do-while</code> statement or an else in an <code>if-else</code> statement like the following:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// body of do-while loop</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == y) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something else</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something else</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Do not place braces in situation where there is only a single statement in the block. For example:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (condition)</span><br><span class=\"line\">      action();</span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">      action();</span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">        do_something();</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        do_something_else();</span><br></pre></td></tr></table></figure>\n\n<p>However, this does not apply if only one branch of an <code>if-else</code> statement is a single statement. In this case, use braces in both branches like the following:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">        do_this();</span><br><span class=\"line\">        do_that();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        do_something_else();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><ul>\n<li>Put return type and modifiers on its own line.</li>\n<li>Put function name and argument list on next line.</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *errstr, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// print error message</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This allows to grep for function names by simply using <code>grep ^functioname(</code></p>\n<h3 id=\"Commenting\"><a href=\"#Commenting\" class=\"headerlink\" title=\"Commenting\"></a>Commenting</h3><ul>\n<li>Use <code>/* comment */</code> for comments</li>\n<li>Use <code>// comment</code> for local, temporary commenting of code for debugging purposes</li>\n</ul>\n<p>The preferred style for long (multi-line) comments is:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * This is the preferred style for multi-line</span></span><br><span class=\"line\"><span class=\"comment\"> * comments in the Linux kernel source code.</span></span><br><span class=\"line\"><span class=\"comment\"> * Please use it consistently.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:  A column of asterisks on the left side,</span></span><br><span class=\"line\"><span class=\"comment\"> * with beginning and ending almost-blank lines.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Macros-Enums-and-RTL\"><a href=\"#Macros-Enums-and-RTL\" class=\"headerlink\" title=\"Macros, Enums and RTL\"></a>Macros, Enums and RTL</h2><p>Names of macros defining constants and labels in enums are capitalized.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONSTANT 0x12345</span></span><br></pre></td></tr></table></figure>\n\n<p>Enums are preferred when defining several related constants.</p>\n<p>CAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case.</p>\n<p>Generally, inline functions are preferable to macros resembling functions.</p>\n<p>Macros with multiple statements should be enclosed in a do - while block:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> macrofun(a, b, c)                       \\</span></span><br><span class=\"line\"><span class=\"meta\">        do &#123;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"meta-keyword\">if</span> (a == 5)                     \\</span></span><br><span class=\"line\"><span class=\"meta\">                        do_this(b, c);          \\</span></span><br><span class=\"line\"><span class=\"meta\">        &#125; while (0)</span></span><br></pre></td></tr></table></figure>\n\n<p>Things to avoid when using macros:</p>\n<ol>\n<li>macros that affect control flow:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO(x)                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">        do &#123;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"meta-keyword\">if</span> (blah(x) &lt; 0)                \\</span></span><br><span class=\"line\"><span class=\"meta\">                        return -EBUGGERED;      \\</span></span><br><span class=\"line\"><span class=\"meta\">        &#125; while (0)</span></span><br></pre></td></tr></table></figure>\n\n<p>is a very bad idea. It looks like a function call but exits the calling function; don’t break the internal parsers of those who will read the code.</p>\n<ol start=\"2\">\n<li>macros that depend on having a local variable with a magic name:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO(val) bar(index, val)</span></span><br></pre></td></tr></table></figure>\n\n<p>might look like a good thing, but it’s confusing as hell when one reads the code and it’s prone to breakage from seemingly innocent changes.</p>\n<ol start=\"3\">\n<li><p>macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function.</p>\n</li>\n<li><p>forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters.</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONSTANT 0x4000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONSTEXP (CONSTANT | 3)</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>namespace collisions when defining local variables in macros resembling functions:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO(x)                          \\</span></span><br><span class=\"line\"><span class=\"meta\">(&#123;                                      \\</span></span><br><span class=\"line\"><span class=\"meta\">        typeof(x) ret;                  \\</span></span><br><span class=\"line\"><span class=\"meta\">        ret = calc_ret(x);              \\</span></span><br><span class=\"line\"><span class=\"meta\">        (ret);                          \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>ret is a common name for a local variable - __foo_ret is less likely to collide with an existing variable.</p>\n<p>The c manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel.</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>This page is generated for website testing purposes</p>\n</blockquote>\n<h3 id=\"Text-Width\"><a href=\"#Text-Width\" class=\"headerlink\" title=\"Text Width\"></a>Text Width</h3><p>There is no set code width, so you do not need to break code lines. However, you should not overdo it, ~100 characters should be enough.</p>\n<h3 id=\"Naming\"><a href=\"#Naming\" class=\"headerlink\" title=\"Naming\"></a>Naming</h3><ul>\n<li>Name structures in <code>PascalCase</code></li>\n<li>Name variables and functions in <code>snake_case</code></li>\n</ul>\n<h3 id=\"Indentation\"><a href=\"#Indentation\" class=\"headerlink\" title=\"Indentation\"></a>Indentation</h3><ul>\n<li>Use tabs not space</li>\n<li>Tabs are 8 characters</li>\n</ul>\n<p>This style of indentation clearly defines where a block of code starts and ends especially when you have been looking at your screen for a long period of time</p>\n<p>For <code>switch-case</code> statement, align the switch and its subordinate case labels in the same column. For example:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">switch</span> (suffix) &#123;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;a&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;b&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">case</span> <span class=\"string\">&#x27;c&#x27;</span>:</span><br><span class=\"line\">      <span class=\"keyword\">break</span>;</span><br><span class=\"line\"><span class=\"keyword\">default</span>:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Spacing\"><a href=\"#Spacing\" class=\"headerlink\" title=\"Spacing\"></a>Spacing</h3><p>Use a space after these keywords: <code>if</code>, <code>switch</code>, <code>case</code>, <code>for</code>, <code>do</code>, <code>while</code></p>\n<p>But not after <code>sizeof</code>, <code>typeof</code>, <code>alignof</code>, or <code>__attribute__</code>.</p>\n<p>When declaring pointer, place the <code>*</code> adjacent to the data name or function<br>name like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">char</span> *<span class=\"built_in\">string</span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> *<span class=\"title\">num</span><span class=\"params\">(<span class=\"keyword\">void</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *errstr, ...)</span></span>;</span><br></pre></td></tr></table></figure>\n\n<p>Use one space around binary and ternary operators, such as these:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">=  +  -  &lt;  &gt;  *  /  %  |  &amp;  ^  &lt;=  &gt;=  ==  !=  ?  :</span><br></pre></td></tr></table></figure>\n\n<p>Do not put space after unary operators:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&amp;  *  +  -  ~  !  sizeof  typeof  alignof  __attribute__  defined</span><br></pre></td></tr></table></figure>\n\n<p>No space after postfix/prefix increment and decrement unary operators:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">++ --</span><br></pre></td></tr></table></figure>\n\n<p>And no space around the <code>.</code> and <code>-&gt;</code> structure member operators.</p>\n<p>In addition, do not leave trailing whitespace at the end of lines</p>\n<h3 id=\"Alignment\"><a href=\"#Alignment\" class=\"headerlink\" title=\"Alignment\"></a>Alignment</h3><p>Use tabs for indentation and spaces for alignment. This ensures everything will line up independent of tab size. This means:</p>\n<ul>\n<li>No tabs except beginning of line.</li>\n<li>Use spaces - not tabs - for multiline macros</li>\n</ul>\n<h3 id=\"Braces-Placement\"><a href=\"#Braces-Placement\" class=\"headerlink\" title=\"Braces Placement\"></a>Braces Placement</h3><p>Put opening brace last on the line, and put the close brace first. This applies to all non-functional statement blocks (if, switch, for, while, do).</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (<span class=\"literal\">true</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do x</span></span><br><span class=\"line\">      <span class=\"comment\">// do y</span></span><br><span class=\"line\">      <span class=\"comment\">// do z</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>However, for function, place opening brace at the beginning of the next line<br>like this:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">function</span> <span class=\"params\">(<span class=\"keyword\">int</span> x)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// body of function</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Usually closing brace is empty on a line of its own except in cases where it is followed by a continuation of the same statement, such as a while in a <code>do-while</code> statement or an else in an <code>if-else</code> statement like the following:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">do</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// body of do-while loop</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">while</span> (condition);</span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (x == y) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (x &gt; y) &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something else</span></span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// do something else</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Do not place braces in situation where there is only a single statement in the block. For example:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (condition)</span><br><span class=\"line\">      action();</span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">      action();</span><br></pre></td></tr></table></figure>\n\n<p>and</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition)</span><br><span class=\"line\">        do_something();</span><br><span class=\"line\"><span class=\"keyword\">else</span></span><br><span class=\"line\">        do_something_else();</span><br></pre></td></tr></table></figure>\n\n<p>However, this does not apply if only one branch of an <code>if-else</code> statement is a single statement. In this case, use braces in both branches like the following:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (condition) &#123;</span><br><span class=\"line\">        do_this();</span><br><span class=\"line\">        do_that();</span><br><span class=\"line\">&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        do_something_else();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Function\"><a href=\"#Function\" class=\"headerlink\" title=\"Function\"></a>Function</h3><ul>\n<li>Put return type and modifiers on its own line.</li>\n<li>Put function name and argument list on next line.</li>\n</ul>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">static</span> <span class=\"keyword\">void</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">die</span><span class=\"params\">(<span class=\"keyword\">const</span> <span class=\"keyword\">char</span> *errstr, ...)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">      <span class=\"comment\">// print error message</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>This allows to grep for function names by simply using <code>grep ^functioname(</code></p>\n<h3 id=\"Commenting\"><a href=\"#Commenting\" class=\"headerlink\" title=\"Commenting\"></a>Commenting</h3><ul>\n<li>Use <code>/* comment */</code> for comments</li>\n<li>Use <code>// comment</code> for local, temporary commenting of code for debugging purposes</li>\n</ul>\n<p>The preferred style for long (multi-line) comments is:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\"> * This is the preferred style for multi-line</span></span><br><span class=\"line\"><span class=\"comment\"> * comments in the Linux kernel source code.</span></span><br><span class=\"line\"><span class=\"comment\"> * Please use it consistently.</span></span><br><span class=\"line\"><span class=\"comment\"> *</span></span><br><span class=\"line\"><span class=\"comment\"> * Description:  A column of asterisks on the left side,</span></span><br><span class=\"line\"><span class=\"comment\"> * with beginning and ending almost-blank lines.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Macros-Enums-and-RTL\"><a href=\"#Macros-Enums-and-RTL\" class=\"headerlink\" title=\"Macros, Enums and RTL\"></a>Macros, Enums and RTL</h2><p>Names of macros defining constants and labels in enums are capitalized.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONSTANT 0x12345</span></span><br></pre></td></tr></table></figure>\n\n<p>Enums are preferred when defining several related constants.</p>\n<p>CAPITALIZED macro names are appreciated but macros resembling functions may be named in lower case.</p>\n<p>Generally, inline functions are preferable to macros resembling functions.</p>\n<p>Macros with multiple statements should be enclosed in a do - while block:</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> macrofun(a, b, c)                       \\</span></span><br><span class=\"line\"><span class=\"meta\">        do &#123;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"meta-keyword\">if</span> (a == 5)                     \\</span></span><br><span class=\"line\"><span class=\"meta\">                        do_this(b, c);          \\</span></span><br><span class=\"line\"><span class=\"meta\">        &#125; while (0)</span></span><br></pre></td></tr></table></figure>\n\n<p>Things to avoid when using macros:</p>\n<ol>\n<li>macros that affect control flow:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO(x)                                  \\</span></span><br><span class=\"line\"><span class=\"meta\">        do &#123;                                    \\</span></span><br><span class=\"line\"><span class=\"meta\">                <span class=\"meta-keyword\">if</span> (blah(x) &lt; 0)                \\</span></span><br><span class=\"line\"><span class=\"meta\">                        return -EBUGGERED;      \\</span></span><br><span class=\"line\"><span class=\"meta\">        &#125; while (0)</span></span><br></pre></td></tr></table></figure>\n\n<p>is a very bad idea. It looks like a function call but exits the calling function; don’t break the internal parsers of those who will read the code.</p>\n<ol start=\"2\">\n<li>macros that depend on having a local variable with a magic name:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO(val) bar(index, val)</span></span><br></pre></td></tr></table></figure>\n\n<p>might look like a good thing, but it’s confusing as hell when one reads the code and it’s prone to breakage from seemingly innocent changes.</p>\n<ol start=\"3\">\n<li><p>macros with arguments that are used as l-values: FOO(x) = y; will bite you if somebody e.g. turns FOO into an inline function.</p>\n</li>\n<li><p>forgetting about precedence: macros defining constants using expressions must enclose the expression in parentheses. Beware of similar issues with macros using parameters.</p>\n</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONSTANT 0x4000</span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> CONSTEXP (CONSTANT | 3)</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"5\">\n<li>namespace collisions when defining local variables in macros resembling functions:</li>\n</ol>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">define</span> FOO(x)                          \\</span></span><br><span class=\"line\"><span class=\"meta\">(&#123;                                      \\</span></span><br><span class=\"line\"><span class=\"meta\">        typeof(x) ret;                  \\</span></span><br><span class=\"line\"><span class=\"meta\">        ret = calc_ret(x);              \\</span></span><br><span class=\"line\"><span class=\"meta\">        (ret);                          \\</span></span><br><span class=\"line\"><span class=\"meta\">&#125;)</span></span><br></pre></td></tr></table></figure>\n\n<p>ret is a common name for a local variable - __foo_ret is less likely to collide with an existing variable.</p>\n<p>The c manual deals with macros exhaustively. The gcc internals manual also covers RTL which is used frequently with assembly language in the kernel.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ckvwh90x60001rktg4c3347th","category_id":"ckvwh90xb0003rktgc36j8fyu","_id":"ckvwh90xh0009rktgh4n93qp8"}],"PostTag":[{"post_id":"ckvwh90x60001rktg4c3347th","tag_id":"ckvwh90xd0004rktgc4ymddx8","_id":"ckvwh90xi000arktg98olaaml"},{"post_id":"ckvwh90x60001rktg4c3347th","tag_id":"ckvwh90xg0008rktg1qctg7ch","_id":"ckvwh90xi000brktg4p090cam"}],"Tag":[{"name":"website","_id":"ckvwh90xd0004rktgc4ymddx8"},{"name":"syntax-highlight","_id":"ckvwh90xg0008rktg1qctg7ch"}]}}